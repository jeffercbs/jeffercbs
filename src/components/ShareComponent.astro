<share-button>
  <button
    class="text-white opacity-80 hover:opacity-100 ease-in-out transition-opacity gap-x-2 focus:ring-1 focus:outline-none font-medium rounded-full text-sm p-2.5 text-center inline-flex items-center me-2"
  >
    <span class="md:hidden flex"> Compartir </span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-share"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"> </path>
      <polyline points="16 6 12 2 8 6"> </polyline>
      <line x1="12" x2="12" y1="2" y2="15"> </line>
    </svg>

    <span class="sr-only">compartir</span>
  </button>
</share-button>

<script>
  /*
	Component extracted from: https://github.com/daviddarnes/share-button/blob/main/share-button.js
	*/

  interface ShareData {
    title: string;
    text: string;
    url: string;
  }

  class ShareButton extends HTMLElement {
    private static readonly TAG_NAME = "share-button";

    static register(tagName?: string): void {
      if ("customElements" in window && "share" in window.navigator) {
        customElements.define(tagName || ShareButton.TAG_NAME, ShareButton);
      }
    }

    connectedCallback(): void {
      this.button?.addEventListener("click", this.share);
    }

    private get button(): HTMLButtonElement | null {
      return this.querySelector("button");
    }

    private share = async (): Promise<void> => {
      try {
        const root = this.getRootNode() as Document;
        const shareData: ShareData = {
          title: root.title,
          text: root.title,
          url: window.location.href,
        };

        await window.navigator.share(shareData);
        console.log("Content shared successfully");
      } catch (error) {
        if (error instanceof Error) {
          console.error("Error sharing content:", error.message);
        } else {
          console.error("An unknown error occurred while sharing");
        }
      }
    };

    disconnectedCallback(): void {
      this.button?.removeEventListener("click", this.share);
    }
  }

  ShareButton.register();
</script>
